file(GLOB SHADER_FILES  Source/*.vs 
                        Source/*.fs
                        Source/*.cs
                        Source/*.shader
                        Source/*.sh
                        Source/*.sc
                        )

set(shaders_output "${CMAKE_CURRENT_SOURCE_DIR}/Cache")
set(shaders_inc_file "${shaders_output}/EmbeddedShaders.h")
set(shaders_cpp_file "${shaders_output}/EmbeddedShaders.cpp")

function (AddShaders extension type dx11Profile)
    foreach(SHADER ${SHADER_FILES})
        get_filename_component(FILE_NAME ${SHADER} NAME_WE)
        get_filename_component(FILE_NAME_EXT ${SHADER} EXT)

        if(${FILE_NAME_EXT} STREQUAL ".${extension}")
            

if(WIN32)
            set(SHADER_OUTPUT_TARGET "${shaders_output}/${FILE_NAME}_${extension}_dx11.h")
            add_custom_command(
                OUTPUT ${SHADER_OUTPUT_TARGET}
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o ${SHADER_OUTPUT_TARGET} --platform windows -p ${dx11Profile} -O 3 --type ${type} --bin2c ${FILE_NAME}_${extension}_dx11
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_dx9.h" --platform windows -p ${dx11Profile} -O 3 --type ${type} --bin2c ${FILE_NAME}_${extension}_dx9
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_glsl.h" --platform asm.js -p 120 --type ${type} --bin2c ${FILE_NAME}_${extension}_glsl
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_mtl.h" --platform osx -p metal --type ${type} --bin2c ${FILE_NAME}_${extension}_mtl
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_spv.h" --platform linux -p spirv --type ${type} --bin2c ${FILE_NAME}_${extension}_spv
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_essl.h" --platform android --type ${type} --bin2c ${FILE_NAME}_${extension}_essl
                DEPENDS ${SHADER}
                COMMENT "Compiling shader ${SHADER}")
elseif(APPLE OR (UNIX AND NOT EMSCRIPTEN))
            message("Compiling shaders on MacOS. HLSL will not be built.")
            set(SHADER_OUTPUT_TARGET "${shaders_output}/${FILE_NAME}_${extension}_mtl.h")
            add_custom_command(
                OUTPUT ${SHADER_OUTPUT_TARGET}
                #COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o ${SHADER_OUTPUT_TARGET} --platform windows -p ${dx11Profile} -O 3 --type ${type} --bin2c ${FILE_NAME}_${extension}_dx11
                #COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_dx9.h" --platform windows -p ${dx11Profile} -O 3 --type ${type} --bin2c ${FILE_NAME}_${extension}_dx9
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_glsl.h" --platform asm.js -p 120 --type ${type} --bin2c ${FILE_NAME}_${extension}_glsl
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_mtl.h" --platform osx -p metal --type ${type} --bin2c ${FILE_NAME}_${extension}_mtl
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_spv.h" --platform linux -p spirv --type ${type} --bin2c ${FILE_NAME}_${extension}_spv
                COMMAND "$<TARGET_FILE:shaderc>" -f ${SHADER} -o "${shaders_output}/${FILE_NAME}_${extension}_essl.h" --platform android --type ${type} --bin2c ${FILE_NAME}_${extension}_essl
                DEPENDS ${SHADER}
                COMMENT "Compiling shader ${SHADER}")
else()
    message("Unsupported platform for building shaders. Skipped.")
endif()
            FILE(APPEND ${shaders_inc_file} "#ifdef WIN32\n#include \"${FILE_NAME}_${extension}_dx9.h\"\n")
            FILE(APPEND ${shaders_inc_file} "#include \"${FILE_NAME}_${extension}_dx11.h\"\n#endif\n")
            FILE(APPEND ${shaders_inc_file} "#include \"${FILE_NAME}_${extension}_glsl.h\"\n")
            FILE(APPEND ${shaders_inc_file} "#ifdef __APPLE__\n#include \"${FILE_NAME}_${extension}_mtl.h\"\n#endif\n")
            FILE(APPEND ${shaders_inc_file} "#include \"${FILE_NAME}_${extension}_spv.h\"\n")
            FILE(APPEND ${shaders_inc_file} "#include \"${FILE_NAME}_${extension}_essl.h\"\n")
            set(SHADER_OUTPUT_FILES ${SHADER_OUTPUT_FILES} ${SHADER_OUTPUT_TARGET} PARENT_SCOPE)
            FILE(APPEND ${shaders_cpp_file} "BGFX_EMBEDDED_SHADER(${FILE_NAME}_${extension}),\n")
        endif()
    endforeach(SHADER)
endfunction()

#if(WIN32)
    FILE(WRITE ${shaders_inc_file} "// generated by CMake\n#include <stdint.h>\n#include <bgfx/embedded_shader.h>\n")
    FILE(WRITE ${shaders_cpp_file} "// generated by CMake\n")
    FILE(WRITE ${shaders_cpp_file} "#include \"EmbeddedShaders.h\"\n#include \"bgfx_utils.h\"\nstatic const bgfx::EmbeddedShader embeddedShaders[] =\n{\n")
    set(SHADER_OUTPUT_FILES "")

    AddShaders("vs" "vertex" "vs_5_0")
    AddShaders("cs" "compute" "ps_5_0")
    AddShaders("fs" "fragment" "ps_5_0")

    FILE(APPEND ${shaders_cpp_file} "BGFX_EMBEDDED_SHADER_END()\n};\n#include \"ShaderHelper.h\"\n")
#endif()

add_library(Shaders ${SHADER_FILES} ${shaders_inc_file} ${shaders_cpp_file} ${SHADER_OUTPUT_FILES} "Include/Shaders.h" "Source/ShaderHelper.h")
target_link_libraries(Shaders bgfx bx example-common)
target_include_directories(Shaders
            PUBLIC "Include"
            PRIVATE "Source")
source_group( "Shader Files" FILES ${SHADER_FILES})


